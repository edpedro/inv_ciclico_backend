generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  username   String
  password   String?  
  role String @default("")
  active Boolean @default(true)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  createdById String?
  createdBy  User?    @relation("CreatedByUser", fields: [createdById], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdUsers User[] @relation("CreatedByUser")
  
 
  baseInventario BaseInventario[]@relation() 
  baseNameInventario BaseNameInventario[]
  baseNameInventarios NameInventarioOnUsers[]
  baseInventarios UsersOnEnderecos[]
  adresses Adresses[]
  
  @@map("users")
}


model BaseInventario {
  id        Int      @default(autoincrement()) @id
  item     String
  descricao   String
  endereco   String
  tipoEstoque   String
  catItem   String
  saldoWms    Float  
  price Float?
  firstCount Float?  
  secondCount Float? 
  firstStatus Boolean? @default(false) 
  secondStatus Boolean?  
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  user User? @relation(fields: [username_id], references: [id])
  username_id String?

  baseNameInventario BaseNameInventario @relation(fields: [baseNameInventario_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  baseNameInventario_id String

  users UsersOnEnderecos[]

  @@map("baseInventario") 

}
model BaseNameInventario {
  id    String      @id @default(uuid())  
  date String
  name String
  firstStatus   Boolean @default(false)
  secondStatus Boolean? 
  type String? 
  upload Boolean? @default(false)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  user User @relation(fields: [create_id], references: [id])
  create_id String

  users NameInventarioOnUsers[]
  baseInventario BaseInventario[]
  usersEnd UsersOnEnderecos[]

  @@map("baseNameInventario") 

}

model NameInventarioOnUsers {
  user User @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id String

  nameInventario BaseNameInventario @relation(fields: [nameInventario_id], references: [id], onUpdate: Cascade)
  nameInventario_id String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([user_id, nameInventario_id])
}

model UsersOnEnderecos {
  user User @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id String

  baseInventario BaseInventario @relation(fields: [baseInventario_id], references: [id], onUpdate: Cascade)
  baseInventario_id Int

  baseNameInventario BaseNameInventario @relation(fields: [baseNameInventario_id], references: [id], onUpdate: Cascade)
  baseNameInventario_id String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([user_id, baseInventario_id])
}

model Adresses {
  id        Int      @default(autoincrement()) @id 
  name String
  codeAdress Int
  descriptionAdress String
  create_id String

  user User @relation(fields: [user_id], references: [id])
  user_id String

  @@map("adresses") 
}